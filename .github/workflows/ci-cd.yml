name: CI/CD Pipeline AWS ECS con CloudFormation

on:
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    branches:
      - develop
      - staging
      - main
  workflow_dispatch:

jobs:
  # ======================================================
  # CI: Build, Test y Publicación de imagen Docker
  # ======================================================
  build-test-publish:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.set_outputs.outputs.repo_name }}
      image_tag: ${{ steps.set_outputs.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black (Formatter)
        run: black app --check

      - name: Run Pylint (Linter)
        run: pylint app --output-format=text --fail-under=9 > pylint-report.txt || true

      - name: Run Flake8 (Linter)
        run: flake8 app --output-file=flake8-report.txt || true

      # Unit Tests → develop
      - name: Run Unit Tests
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Running UNIT tests..."
          pytest --ignore=tests/test_acceptance_app.py --ignore=tests/test_smoke_app.py

      # Acceptance Tests → staging
      - name: Run Acceptance Tests
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "Running ACCEPTANCE tests..."
          pytest tests/test_acceptance_app.py

      # Smoke Tests → main
      - name: Run Smoke Tests
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Running SMOKE tests..."
          pytest tests/test_smoke_app.py

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            htmlcov/
            report.html

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Build & push Docker image → staging y main (ambos despliegan)
      - name: Set up QEMU
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: docker_build_push
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set Job Outputs
        id: set_outputs
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
        run: |
          echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT


  # ======================================================
  # DEPLOY STAGING
  # ======================================================
  deploy-cfn-staging:
    needs: build-test-publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    outputs:
      alb_url_staging: ${{ steps.get_stack_outputs.outputs.alb_url }}
      cluster_name_staging: "todolist-staging-cluster"
      service_name_staging: "todolist-staging-service"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy CloudFormation (Staging)
        run: |
          IMAGE_URI="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-test-publish.outputs.repo_name }}:${{ needs.build-test-publish.outputs.image_tag }}"
          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name todolist-staging-stack \
            --parameter-overrides \
              EnvironmentName=staging \
              DockerImageUri=$IMAGE_URI \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds="${{ secrets.SUBNET_IDS }}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changes

      - name: Get Staging Stack Outputs
        id: get_stack_outputs
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name todolist-staging-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          ALB_URL=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')
          echo "alb_url=http://${ALB_URL}/" >> $GITHUB_OUTPUT


  update-service-staging:
    needs: [build-test-publish, deploy-cfn-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Force New Deployment (Staging)
        run: |
          aws ecs update-service \
            --cluster ${{ needs.deploy-cfn-staging.outputs.cluster_name_staging }} \
            --service ${{ needs.deploy-cfn-staging.outputs.service_name_staging }} \
            --force-new-deployment \
            --region us-east-1


  # ======================================================
  # DEPLOY PRODUCCIÓN
  # ======================================================
  deploy-cfn-prod:
    needs: build-test-publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      alb_url_prod: ${{ steps.get_stack_outputs.outputs.alb_url }}
      cluster_name_prod: "todolist-production-cluster"
      service_name_prod: "todolist-production-service"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy CloudFormation (Production)
        run: |
          IMAGE_URI="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-test-publish.outputs.repo_name }}:${{ needs.build-test-publish.outputs.image_tag }}"
          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name todolist-prod-stack \
            --parameter-overrides \
              EnvironmentName=production \
              DockerImageUri=$IMAGE_URI \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds="${{ secrets.SUBNET_IDS }}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changes

      - name: Get Production Stack Outputs
        id: get_stack_outputs
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name todolist-prod-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          ALB_URL=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')
          echo "alb_url=http://${ALB_URL}/" >> $GITHUB_OUTPUT


  update-service-prod:
    needs: [build-test-publish, deploy-cfn-prod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Force New Deployment (Production)
        run: |
          aws ecs update-service \
            --cluster ${{ needs.deploy-cfn-prod.outputs.cluster_name_prod }} \
            --service ${{ needs.deploy-cfn-prod.outputs.service_name_prod }} \
            --force-new-deployment \
            --region us-east-1


  # ======================================================
  # SMOKE TESTS EN PRODUCCIÓN
  # ======================================================
  smoke-test-prod:
    needs: [update-service-prod, deploy-cfn-prod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Smoke Tests (Production)
        env:
          APP_BASE_URL: ${{ needs.deploy-cfn-prod.outputs.alb_url_prod }}
        run: |
          sleep 30
          pytest tests/test_smoke_app.py
